#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('eote-dice:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var WebSocketServer = require('ws').Server;
var wss = new WebSocketServer({server: server});
var _ = require('lodash');
var url = require('url');

var DiceThrow = require("../eote-model/dice/DiceThrow");

wss.broadcastNewThrow = function (data) {
  this.clients
      .filter(function (client) {
        return url.parse(client.upgradeReq.url, true).pathname == "/newThrows"
      })
      .forEach(function (client) {
        client.send(JSON.stringify(data));
      });
};

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    var data = JSON.parse(message);
    if (data.ping == 1) {
      // Do nothing, it is a ping for keeping session alive
    } else {
      wss.broadcastNewThrow(
          diceThrowResult( data )
      );
    }
  });
});

var EffectiveResult = require('../eote-model/dice/EffectiveResult');

function diceThrowResult(diceThrowRequest) {
  var rolls = DiceThrow.fromRequest(diceThrowRequest.diceThrow).resultingRolls();
  return {
    playerName: diceThrowRequest.playerName,
    rolls: rolls,
    effectiveResult: new EffectiveResult(rolls)
  };
}
